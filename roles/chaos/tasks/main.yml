- name: "EXPERIMENT 1: Auto Healing Test (AWS)"
  block:
    - name: "Get current AWS instance info"
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters: 
          "tag:{{ aws_project_tag }}": "{{ aws_project_value }}"
          "instance-state-name": ["running"]
      register: aws_instance_info_before

    - name: "Set facts for instance to be terminated"
      ansible.builtin.set_fact:
        aws_instance_id_to_terminate: "{{ aws_instance_info_before.instances[0].instance_id }}"
        aws_ip_to_terminate: "{{ aws_instance_info_before.instances[0].public_ip_address }}"

    - name: "CHAOS INJECT: Terminate AWS Instance"
      amazon.aws.ec2_instance:
        instance_ids: [ "{{ aws_instance_id_to_terminate }}" ]
        region: "{{ aws_region }}"
        state: absent
      delegate_to: localhost
      
    - name: "VERIFICATION: Wait for ASG to launch a new instance"
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:{{ aws_project_tag }}": "{{ aws_project_value }}"
          "instance-state-name": ["running", "pending"]
      register: aws_instance_info_after
      until: "aws_instance_info_after.instances | length > 0 and aws_instance_info_after.instances[0].instance_id != aws_instance_id_to_terminate"
      retries: 15
      delay: 10
      
    - name: "Set new instance IP fact"
      ansible.builtin.set_fact:
        new_aws_instance_ip: "{{ aws_instance_info_after.instances[0].public_ip_address }}"

    - name: "VERIFICATION: Check if new web server is responding"
      ansible.builtin.uri:
        url: "http://{{ new_aws_instance_ip }}"
        status_code: 200
      register: web_check
      until: web_check.status == 200
      retries: 20
      delay: 10
      delegate_to: localhost
      
- name: "EXPERIMENT 2: Network Latency (GCP)"
  block:
    - name: "Get GCP instance and its default interface"
      ansible.builtin.setup:
        filter: ansible_default_ipv4
      delegate_to: "{{ groups[gcp_instance_group][0] }}"
      register: gcp_facts

    - name: "Set target and interface facts"
      ansible.builtin.set_fact:
        gcp_instance_target: "{{ groups[gcp_instance_group][0] }}"
        gcp_interface: "{{ gcp_facts.ansible_facts.ansible_default_ipv4.interface }}"

    - name: "CHAOS INJECT: Inject 300ms Latency on GCP Instance"
      ansible.builtin.shell: "tc qdisc add dev {{ gcp_interface }} root netem delay 300ms"
      delegate_to: "{{ gcp_instance_target }}"
      become: yes

    - name: "Wait for 60 seconds for latency to be observed"
      ansible.builtin.pause:
        seconds: 60
        prompt: "EXPERIMENT 2: 300ms latency injected on GCP ({{ gcp_interface }}). Monitor with 'ping {{ gcp_instance_target }}'. Press Enter to cleanup."

  always:
    - name: "CHAOS CLEANUP: Remove Latency Rule from GCP Instance"
      ansible.builtin.shell: "tc qdisc del dev {{ gcp_interface }} root"
      delegate_to: "{{ gcp_instance_target | default(omit) }}"
      become: yes
      ignore_errors: yes
      when: gcp_instance_target is defined